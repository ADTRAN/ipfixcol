################################################
#     Makefile for the fbitdump utility        #
################################################

CXX      = @CXX@
CXXFLAGS  = @CXXFLAGS@
LIBS    = @LIBS@
FLEX = @FLEX@

NAME = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
RELEASE= @RELEASE@

SRCS    = fbitdump.cpp \
		Configuration.cpp \
		Column.cpp \
		protocols.cpp \
		Table.cpp \
		Printer.cpp \
		Filter.cpp \
		TableManager.cpp \
		TableManagerCursor.cpp \
		Cursor.cpp \
		Values.cpp \
		Resolver.cpp
OBJDIR  = .obj
SRCDIR  = src
SRC3RD  = 3rdparty

#documentation tools
XSLTPROC = @XSLTPROC@
XSLTMANSTYLE = @XSLTMANSTYLE@
DOXYGEN = @DOXYGEN@
DOXYGEN_CONFIG = doxyconf
DOXYGEN_DIR = doc
MANDIR = man
MANSRC = fbitdump.dbk fbitdump.xml.dbk

prefix = @prefix@
exec_prefix = @exec_prefix@
datadir = @datadir@
datarootdir = @datarootdir@
bindir = @bindir@
includedir = @includedir@
libdir =  @libdir@
mandir = @mandir@

RPMDIR=RPMBUILD
RPMBUILD = @RPMBUILD@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
# what should be copied to ouput, resulting binary
TARGET_BIN = fbitdump
TARGET_DATA = fbitdump.xml
# configuration and installation files
CONF = configure.in fbitdump.xml install-sh Makefile.in VERSION fbitdump.spec.in tools

# scanner must be build before filter (filter includes scanner's header)
OBJS = $(OBJDIR)/scanner.o $(SRCS:%.cpp=$(OBJDIR)/%.o) $(OBJDIR)/pugi.o

all: fbitdump

# fbitdump
fbitdump: $(OBJS) VERSION
	$(CXX) $(CXXFLAGS) $(LIBS) $(OBJS) -o $@

# Printer is specified extra with -fno-strict-aliasing for performance reasons
$(OBJDIR)/Printer.o: $(SRCDIR)/Printer.cpp
	$(CXX) $(CXXFLAGS) -fno-strict-aliasing -c $< -o $@

$(OBJDIR)/Resolver.o: $(SRCDIR)/Resolver.cpp
	$(CXX) $(CXXFLAGS) -fno-strict-aliasing -c $< -o $@

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(SRCDIR)/protocols.cpp: /etc/protocols
	cd tools && ./generate_protocols.sh

$(OBJDIR)/pugi.o: $(SRC3RD)/pugixml.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# rules to build the lex scanner
$(OBJDIR)/scanner.o: $(SRCDIR)/scanner.c
	-mkdir $(OBJDIR)
	@[ -d $$(dirname $@) ] || \
		(mkdir -p $$(dirname $@))
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(SRCDIR)/scanner.c: $(SRCDIR)/scanner.l
	$(FLEX) -o $(SRCDIR)/scanner.c --header-file=$(SRCDIR)/scanner.h $<

.PHONY: doc man
doc: doxygen man

doxygen: $(DOXYGEN_CONFIG) $(SRCS:%=$(SRCDIR)/%)
	@[ -d $(DOXYGEN_DIR) ] || mkdir -p $(DOXYGEN_DIR); \
	if [ -n "$(DOXYGEN)" ]; then \
		(cat $(DOXYGEN_CONFIG); \
		echo 'OUTPUT_DIRECTORY = $(DOXYGEN_DIR)' ) | \
		$(DOXYGEN) - > /dev/null; \
	else \
		echo "Missing doxygen"; \
		exit 1; \
	fi

man: $(addprefix $(MANDIR)/, $(MANSRC))
	@if [ -n "$(XSLTPROC)" ]; then \
		if [ -f "$(XSLTMANSTYLE)" ]; then \
			cd $(MANDIR); \
			for i in $(MANSRC); do \
				echo $(XSLTPROC) $(XSLTMANSTYLE) $$i; \
				$(XSLTPROC) $(XSLTMANSTYLE) $$i; \
			done; \
			for i in `ls -1 | grep -v -E "*.dbk$$"`; do \
				gzip $$i; \
			done; \
			cd - > /dev/null; \
		else \
			echo "Missing $(XSLTMANSTYLE)!"; \
			exit 1; \
		fi \
	else \
		echo "Missing xsltproc"; \
	fi


.PHONY: install
install: $(TARGET_BIN) $(TARGET_DATA)
	[ -d $(DESTDIR)$(bindir) ] || \
		(mkdir -p $(DESTDIR)$(bindir); chmod 755 $(DESTDIR)$(bindir));
	$(INSTALL_PROGRAM) $(TARGET_BIN) $(DESTDIR)$(bindir)/;
	[ -d $(DESTDIR)$(datadir)/$(NAME)/ ] || \
		(mkdir -p $(DESTDIR)$(datadir)/$(NAME)/; chmod 755 $(DESTDIR)$(datadir)/$(NAME)/);
	$(INSTALL_DATA) $(TARGET_DATA) $(DESTDIR)$(datadir)/$(NAME)/;
	for i in 1 5; do \
		[ -d $(DESTDIR)$(mandir)/man$$i/ ] || \
			(mkdir -p $(DESTDIR)$(mandir)/man$$i/; chmod 755 $(DESTDIR)$(mandir)/man$$i/); \
			cd $(MANDIR); \
			$(INSTALL_DATA) `ls -1 | grep -E "*.$$i.gz$$"` $(DESTDIR)$(mandir)/man$$i/; \
			cd - > /dev/null; \
	done;


.PHONY: tarball
tarball: $(CONF) $(SRCDIR)
	@rm -rf $(NAME)-$(VERSION); \
	mkdir $(NAME)-$(VERSION); \
	rm -rf $(RPMDIR)/SOURCES/; \
	mkdir -p $(RPMDIR)/SOURCES/; \
	for i in $(SRC3RD) $(SRCDIR) $(CONF) $(MANDIR)/*.dbk; do \
		[ "$$i" != "$${i%/*}" -a ! -d $(NAME)-$(VERSION)/$${i%/*} ] && mkdir -p $(NAME)-$(VERSION)/$${i%/*}; \
		cp -r $$i $(NAME)-$(VERSION)/$$i; \
	done;
	tar -c -z -f $(RPMDIR)/SOURCES/$(NAME)-$(VERSION)-$(RELEASE).tar.gz \
	    $(NAME)-$(VERSION);
	@rm -rf $(NAME)-$(VERSION);

.PHONY: rpm
rpm: tarball $(NAME).spec
	@mkdir -p $(RPMDIR)/BUILD $(RPMDIR)/RPMS $(RPMDIR)/SOURCES $(RPMDIR)/SPECS $(RPMDIR)/SRPMS;
	$(RPMBUILD) -ba $(NAME).spec \
		--define "_topdir `pwd`/$(RPMDIR)";

.PHONY: clean
clean:
	rm -f fbitdump src/protocols.cpp src/scanner.h src/scanner.c
	rm -fr doc $(OBJDIR)
	rm -fr $(RPMDIR) $(MANDIR)/*.gz

